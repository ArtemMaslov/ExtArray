///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
// Модуль выделителя памяти расширяющийся массив ExtArray.
// 
// Структура является динамическим массивом для элементов произвольного типа.
// Память выделяется одним блоком с начальным количеством элементов EXT_ARRAY_DEFAULT_CAPACITY. 
// При добавлении новых элементов, в случае нехватки памяти, происходит автоматическое 
// выделение нового блока памяти с размером в EXT_ARRAY_RESIZE_MULTIPLIER раз больше старого.
// Добавленные ранее элементы автоматически копируются в новый блок памяти. После этого
// старый блок памяти освобождается. Добавленные в ExtArray элементы должны быть одного размера.
// Удалять элементы из ExtArray нельзя. Добавленные элементы можно изменять.
// 
// ExtArray подходит для работы с объектами одного и того же типа, когда нужно выделить
// кеш-дружелюбный блок памяти, и в конце работы одним вызовом free освободить все объекты.
//  
// Использование:
// 1. Добавить файл "Modules/ErrorsHandling.h" и директорию "Modules/ExtArray" в проект.
// 
// 2. Подключить заголовочный файл "ExtArray.h".
// 
// 3. Создать пустую структуру ExtArray extArray = {}.
// 
// 4. Вызвать конструктор ExtArrayConstructor.
// 
// 5. Добавлять элементы можно функцией ExtArrayAddElem.
// 
// 6. Получить указатель на добавленный элемент можно с помощью функции ExtArrayGetElemAt.
//    Элемент можно изменять, используя полученный указатель.
// 
// 7. В конце работы освободить ресурсы вызовом ExtArrayDestructor.
// 
// 8. Чтобы отключить поддержку логов нужно добавить в проект файл "Modules/DisableLogs.h",
//    и в этом файле установить значение true дефайна MODULE_EXT_ARRAY_DISABLE_LOGS.
// 
// Версия: 1.0.1.1
// Дата последнего изменения: 11:11 03.02.2023
// 
// Автор: Маслов А.С. (https://github.com/ArtemMaslov).
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#pragma once

#include <UtilLib/ErrorsHandling.h>
#include <UtilLib/TargetOS.h>

/// Чтобы отключить поддержку логов в модуле, нужно установить значение true.
#define MODULE_EXT_ARRAY_DISABLE_LOGS false

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 

namespace UtilLib
{
	/**
	* @brief  Во сколько раз новый выделяемый блок памяти должен быть больше старого.
	* 
	* Коэффициент должен быть строго больше 1.
	* 
	* Не рекомендуется ставить значение близкое к 1.0, тогда снижается скорость работы
	* из-за частых выделений памяти системой. При больших значениях будет много неиспользуемой
	* памяти.
	* 
	* Наиболее эффективное значение коэффициента должно отдельно подбираться для каждой задачи.
	*/
	static constexpr float EXT_ARRAY_RESIZE_MULTIPLIER = 2;

	static_assert(EXT_ARRAY_RESIZE_MULTIPLIER > 1);
	/**
	* @brief   Начальный количество элементов массива по умолчанию.
	* 
	* Начальное количество элементов массива указывается при вызове конструктора. Наиболее эффективное
	* значение такое, чтобы в процессе работы не возникало дополнительных выделений памяти.
	* 
	* Значение данного коэффициента должно отдельно подбираться для каждой задачи.
	*/
	static const size_t EXT_ARRAY_DEFAULT_CAPACITY  = 1024;

	/// Расширяющийся массив.
	struct ExtArray
	{
		/// Указатель на динамический блок памяти.
		void*  Array;

		/// Размер одного элемента массива в байтах.
		size_t ElemSize;

		/// Текущее количество заполненных элементов массива.
		size_t Size;
		/// Максимальное количество элементов массива (вместимость).
		size_t Capacity;

		/// Коэффициент выделения памяти.
		float  Resize;
		/// Счётчик дополнительных выделений памяти.
		size_t ReallocCounter;
	};

	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

	/**
	* @brief Конструктор расширяющегося массива.
	* 
	* @param extArray Указатель на проинициализированную нулем структуру ExtArray.
	* @param elemSize Размер одного элемента массива.
	* @param capacity Начальное количество элементов массива.
	* 
	* @return ProgramStatus::Fault, если не удалось выделить память. 
	*	       ProgramStatus::Ok, если нет ошибок.
	*/
	ProgramStatus ExtArrayConstructor(ExtArray* extArray, 
									  const size_t elemSize, 
									  const size_t capacity = EXT_ARRAY_DEFAULT_CAPACITY,
									  const float  resize   = EXT_ARRAY_RESIZE_MULTIPLIER);

	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

	void ExtArrayDestructor(ExtArray* extArray,
							const char* const funct, const char* const file, const size_t line);

	/**
	* @brief  Деструктор расширяющегося массива.
	* 
	* Если в ходе работы ExtArray были перевыделения памяти, то сообщение об
	* этом будет записано в файл логов.
	* 
	* После вызова деструктора структуру можно повторно использовать.
	* 
	* @param extArray Указатель на структуру ExtArray.
	* 
	* @return void.
	*/
	#define ExtArrayDestructor(extArray) \
		ExtArrayDestructor(extArray, FUNCTION_SIGNATURE, __FILE__, __LINE__)

	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

	/**
	* @brief  Добавить элемент в расширяющийся массив.
	* 
	* Функция копирует содержимое elem в выделенное элементу место.
	* 
	* В случае нехватки памяти для добавления элемента, будет автоматически выделен
	* новый блок памяти размером в EXT_ARRAY_RESIZE_MULTIPLIER раз больше. Добавленные 
	* ранее элементы будут скопированы в новый блок памяти. После этого старый блок 
	* памяти освобождается.
	* 
	* @param extArray Указатель на структуру ExtArray.
	* @param elem     Указатель на элемент массива.
	* 
	* @return ProgramStatus::Fault, если не удалось выделить память. 
	*	       ProgramStatus::Ok, если нет ошибок.
	*/
	ProgramStatus ExtArrayAddElem(ExtArray* extArray, const void* elem);

	/**
	* @brief  Получить указатель на элемент массива.
	* 
	* @warning Пользователь несёт ответственность за порчу данных, в случае выхода за 
	* границы элемента массива.
	* @warning В Release нет проверки на выход индекса за границу массива.
	* 
	* @param extArray Указатель на структуру ExtArray.
	* @param index    Номер элемента массива.
	* 
	* @return Указатель на элемент массива.
	*/
	void* ExtArrayGetElemAt(const ExtArray* extArray, const size_t index);

	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

	void ExtArrayDump(const ExtArray* const extArray,
					  const char* const funct, const char* const file, const size_t line);

	/**
	* @brief  Добавить в лог файл сообщение о состоянии ExtArray.
	* 
	* @param extArray Указатель на структуру ExtArray.
	* 
	* @return void.
	*/
	#define ExtArrayDump(extArray) \
		ExtArrayDump(extArray, FUNCTION_SIGNATURE, __FILE__, __LINE__)
}

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///