///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
// Модуль выделителя памяти расширяющийся массив ExtArray.
// 
// Структура является динамическим массивом для элементов произвольного типа.
// Память выделяется одним блоком с начальным количеством элементов capacity, передаваемым
// в конструктор. При добавлении новых элементов, в случае нехватки памяти, происходит 
// автоматическое выделение нового блока памяти с размером в ResizeCoefficient раз больше
// старого. Добавленные ранее элементы автоматически копируются в новый блок памяти с помощью
// memcpy. Если объект не может быть скопирован таким тривиальным способом, то нужно 
// дорабатывать библиотеку. После завершения копирования старый блок памяти освобождается.
// Добавлять/удалять элементы из ExtArray можно только с конца. 
// Добавленные элементы можно изменять.
// 
// ExtArray подходит для работы с объектами одного и того же типа, когда нужно выделить
// кеш-дружелюбный блок памяти, и в конце работы одним вызовом delete освободить всю память.
//  
// Использование:
// 1. Добавить в проект следующие файлы и директории:
//        UtilLib/General.h
//        UtilLib/TargetOS.h
//        UtilLib/DisableLogs.h (при необходимости)
//        UtilLib/Logs/         (при необходимости, полностью директорию)
// 
// 2. Подключить заголовочный файл "ExtArray.h".
//    Внимание! Заголовочный файл "ExtArray_imp.h" вручную никуда подключать не нужно!
// 
// 3. Краткое использование (более подробную информацию смотрите в описании функций ниже):
//    Создать объект:
//        ExtArray<int /*тип элементов*/> extArray(CODE_LOCATION, 
//                                                 32 /*capacity*/,
//                                                 2  /*resize_coeff*/);
//    Добавить элементы:
//	      extArray.AddElem(123).
//    Получить доступ к элементу:
//        extArray[0] = 345;
//        int a = extArray[0];
// 
// 4. Чтобы отключить поддержку логов нужно добавить в проект файл "Modules/DisableLogs.h",
//    и в этом файле установить значение true дефайна MODULE_EXT_ARRAY_DISABLE_LOGS.
// 
// 5. Чтобы отключить 
// 
// Версия: 1.0.2.0
// Дата последнего изменения: 20:40 05.03.2023
// 
// Автор: Маслов А.С. (https://github.com/ArtemMaslov).
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#pragma once

#include <UtilLib/General.h> 
#include <UtilLib/TargetOS.h>
#include <UtilLib/Logs/CodeLocation.h>

/// Чтобы отключить поддержку логов в модуле, нужно установить значение true.
#define MODULE_EXT_ARRAY_DISABLE_LOGS false
/// При вызове деструктора ExtArray проверяет количество повторных выделений памяти.
/// Если происходили повторные выделения, то предупреждение об этом будет записано в файл
/// логов. Чтобы программист мог в дальнейшем понять, какой экземпляр ExtArray повторно
/// выделял память, и увеличить начальное значение capacity, ExtArray хранит имя функции,
/// имя файла и номер строки, в которых был вызван конструктор ExtArray.
/// Выключить сохранение данной информации можно установив значение этого #define в false.
#define MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE true

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 

namespace UtilLib
{
	/**
	* @brief  Значение по умолчанию. Во сколько раз новый выделяемый блок памяти при 
	* переполнении ExtArray должен быть больше старого.
	* 
	* Коэффициент должен быть строго больше 1.
	* 
	* Не рекомендуется ставить значение близкое к 1.0, тогда снижается скорость работы
	* программы из-за частых выделений памяти системой. В тоже время при слишком больших
	* значениях будет много неиспользуемой памяти.
	* 
	* Наиболее эффективное значение коэффициента должно отдельно подбираться отдельно
	* для каждой задачи.
	*/
	constexpr float EXT_ARRAY_RESIZE_MULTIPLIER = 2;
	static_assert(EXT_ARRAY_RESIZE_MULTIPLIER > 1);

	/**
	* @brief  Значение по умолчанию. Начальное количество элементов ExtArray.
	* 
	* Начальное количество элементов массива указывается при вызове конструктора. Наиболее
	* эффективное значение такое, что в процессе работы с ExtArray не возникает повторных
	* выделений памяти и в тоже время используется в среднем 80-90% элементов массива.
	* 
	* Значение данного коэффициента должно отдельно подбираться для каждой задачи.
	*/
	constexpr size_t EXT_ARRAY_DEFAULT_CAPACITY = 1024;
	static_assert(EXT_ARRAY_DEFAULT_CAPACITY > 1);

	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 
	///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 
	
	// 4820 - выравнивание не важно.
	#if defined(MSVC)
		#pragma warning (push)
		#pragma warning (disable: 4820)
	#endif

	/// Расширяющийся массив.
	template <typename T>
	class ExtArray
	{
	public:

		#if (MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE)

			/**
			 * @brief   Конструктор расширяющегося массива.
			 * 
			 * @param   location Имя функции, файл и номер строки, в которых был вызван конструктор.
			 *                   Используйте макрос CODE_LOCATION вместо указания этого параметра
			 *                   вручную.
			 * 
			 * @param   capacity Начальное количество элементов массива.
			 * @param   resize   Коэффициент увеличения количества элементов массива при 
			 *                   повторном выделении памяти.
			 *                   newCapacity = resize * oldCapacity.
			 * 
			 * @usage
			 * {
			 *     ExtArray<Type> extArray(CODE_LOCATION, capacity, resize);
			 * }
			 * 
			 * @throw   UtilLib::MemoryAllocation.
			*/
			ExtArray(const CodeLocation location,
					 csize_t  capacity = EXT_ARRAY_DEFAULT_CAPACITY,
					 cfloat_t resize   = EXT_ARRAY_RESIZE_MULTIPLIER);

		#else // (MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE)

			/**
			 * @brief Конструктор расширяющегося массива.
			 * 
			 * @param capacity  Начальное количество элементов массива.
			 * @param resize    Коэффициент увеличения количества элементов массива
			 *                  при повторном выделении памяти.
			 *                  newCapacity = resize * oldCapacity.
			 * 
			 * @throw UtilLib::MemoryAllocation.
			*/
			ExtArray(csize_t  capacity = EXT_ARRAY_DEFAULT_CAPACITY,
					 cfloat_t resize   = EXT_ARRAY_RESIZE_MULTIPLIER);

		#endif // (MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE)

		///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 
		///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***/// 

		/**
		 * @brief Деструктор расширяющегося массива.
		 * 
		 * Если в ходе работы ExtArray были повторные выделения памяти, то сообщение об
		 * этом будет записано в файл логов.
		*/
		~ExtArray() noexcept;

		/**
		 * @brief Добавить элемент в расширяющийся массив.
		 * 
		 * Функция копирует содержимое elem в выделенное элементу место.
		 * 
		 * В случае нехватки памяти для добавления элемента, будет автоматически выделен
		 * новый блок памяти размером в EXT_ARRAY_RESIZE_MULTIPLIER раз больше старого. 
		 * Добавленные ранее элементы будут скопированы в новый блок памяти. После этого
		 * старый блок памяти освобождается.
		 * 
		 * @param elem Добавляемый элемент.
		 * 
		 * @throw UtilLib::MemoryAllocation.
		*/
		void AddElem(const T& elem);

		/**
		 * @brief Добавить элемент в расширяющийся массив.
		 * 
		 * Функция перемещает содержимое elem в выделенное элементу место.
		 * 
		 * В случае нехватки памяти для добавления элемента, будет автоматически выделен
		 * новый блок памяти размером в EXT_ARRAY_RESIZE_MULTIPLIER раз больше старого. 
		 * Добавленные ранее элементы будут скопированы в новый блок памяти. После этого
		 * старый блок памяти освобождается.
		 * 
		 * @param elem Добавляемый элемент.
		 * 
		 * @throw UtilLib::MemoryAllocation.
		*/
		void AddElem(T&& elem);

		/**
		 * @brief   Получить указатель на элемент массива.
		 * 
		 * @warning Пользователь несёт ответственность за порчу данных, в случае выхода за 
		 *          границы элемента массива.
		 * @warning В Release нет проверки на выход индекса за границу массива.
		 * 
		 * @param   index Номер элемента массива.
		 * 
		 * @return  Указатель на элемент массива.
		*/
		T& operator [] (csize_t index);

		/**
		 * @brief   Получить указатель на элемент массива.
		 * 
		 * @warning Пользователь несёт ответственность за порчу данных, в случае выхода за 
		 *          границы элемента массива.
		 * @warning В Release нет проверки на выход индекса за границу массива.
		 * 
		 * @param   index Номер элемента массива.
		 * 
		 * @return  Указатель на элемент массива.
		*/
		const T& operator [] (csize_t index) const;

		/**
		 * @brief Добавить в лог файл сообщение о состоянии ExtArray.
		 * 
		 * @param location Имя функции, файл и номер строки, в которых был вызван конструктор.
		 *                 Используйте макрос CODE_LOCATION вместо указания этого параметра
		 *                 вручную.
		*/
		void Dump(const CodeLocation Location) const noexcept;
		
	private:

		/**
		 * @brief Увеличить размер массива в ResizeCoefficient раз.
		 * 
		 * @throw UtilLib::MemoryAllocation.
		*/
		void Resize(const CodeLocation location);
		
		/**
		 * @brief Выделить массив размером capacity.
		 * 
		 * @throw UtilLib::MemoryAllocation.
		*/
		T* AllocArray(csize_t capacity) const;

	public:
		/// Размер одного элемента массива в байтах.
		static constexpr size_t ElemSize = sizeof(T);

		/// Массив элементов.
		T*      Array;

		/// Текущее количество заполненных элементов массива.
		size_t  Size;
		/// Максимальное количество элементов массива (вместимость).
		size_t  Capacity;

		/// Коэффициент выделения памяти.
		float   ResizeCoefficient;
		/// Счётчик дополнительных выделений памяти.
		size_t  ReallocCounter;

	#if MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE
		/// Место кода, где был сконструирован ExtArray.
		/// Используется для отладки.
		CodeLocation Location;
	#endif // !MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE
	};

	#if defined(MSVC)
		#pragma warning (pop)
	#endif
}

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///

#include "ExtArray_impl.h"

#undef MODULE_EXT_ARRAY_DISABLE_LOGS
#undef MODULE_EXT_ARRAY_ENABLE_CTOR_TRACE

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***///